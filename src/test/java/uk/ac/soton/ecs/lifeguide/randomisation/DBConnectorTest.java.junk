package uk.ac.soton.ecs.lifeguide.randomisation;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Created with IntelliJ IDEA.
 * User: ks6g10
 * Date: 11/10/13   
 * Time: 16:29
 * To change this template use File | Settings | File Templates.
 */
public class DBConnectorTest {

    @Test
    public void testFalse() {
        DBConnector db = new DummyDBConnector();
        Assert.assertFalse(db.disconnect());
        Assert.assertFalse(db.registerIntervention(null));
        Assert.assertFalse(db.haveTable(null));
        Assert.assertFalse(db.registerStrategy(null));
        Assert.assertFalse(db.strategyExists(null));
    }

    @Test
    public void testDoubleConnect() {
        DBConnector db = new DummyDBConnector();
        Assert.assertFalse(db.disconnect());
        Assert.assertTrue(db.connect());
        Assert.assertFalse(db.connect());
        Assert.assertTrue(db.disconnect());
        Assert.assertFalse(db.disconnect());
    }

    @Test
    public void testStrategy() {
        DBConnector db = new DummyDBConnector();
        Assert.assertFalse(db.strategyExists("Hello"));
        Assert.assertFalse(db.registerStrategy("Hello"));
        Assert.assertTrue(db.connect());
        Assert.assertTrue(db.registerStrategy("Hello"));
        Assert.assertFalse(db.strategyExists("Hello2"));
        Assert.assertTrue(db.strategyExists("Hello"));
        Assert.assertFalse(db.registerStrategy("Hello"));
    }

    /*
    @Test
    @Ignore
    public void testTable() {
        DBConnector db = new DummyDBConnector();
        TrialDefinition td = new TrialDefinition();
        Attribute at = new Attribute();
        List<Group> groups = new LinkedList<Group>();

        groups.add(new Group("Low", Integer.MIN_VALUE, 15));
        groups.add(new Group("Mid", 16, 35));
        groups.add(new Group("Old", 36, Integer.MAX_VALUE));
        at.setRanges(groups);
        at.setAttributeName("Age");
        at.setWeight(1.0f);
        List<Attribute> attributes = new LinkedList<Attribute>();
        attributes.add(at);
        at = new Attribute();
        groups = new LinkedList<Group>();

        groups.add(new Group("Low", Integer.MIN_VALUE, 15));
        groups.add(new Group("Mid", 16, 35));
        groups.add(new Group("Old", 36, Integer.MAX_VALUE));
        at.setRanges(groups);
        at.setAttributeName("Burgers");
        at.setWeight(1.0f);

        attributes.add(at);
        td.setAttributes(attributes);
        Assert.assertTrue(db.connect());
        Assert.assertTrue(db.registerIntervention(td));
        Map<TrialDefinition, Table> dbtable = ((DummyDBConnector) db).getDb();

        Table tmp_table = dbtable.get(td);
        String[] atttr = new String[]{"Age", "Burgers"};
        tmp_table.attr = atttr.clone();
        tmp_table.matrix.add(new int[]{1, 1});  //low low
        tmp_table.matrix.add(new int[]{14, 14}); //low low
        tmp_table.matrix.add(new int[]{16, 14}); //mid low
        tmp_table.matrix.add(new int[]{14, 16}); //low mid
        tmp_table.matrix.add(new int[]{16, 16});    // mid mid

        Assert.assertEquals(2, db.getCount(td, atttr, new int[]{0, 0}));
        Assert.assertEquals(1, db.getCount(td, atttr, new int[]{0, 1}));
        Assert.assertEquals(1, db.getCount(td, atttr, new int[]{1, 0}));
        Assert.assertEquals(1, db.getCount(td, atttr, new int[]{1, 1}));


        //need to add attributes and such
    }
    */

}
