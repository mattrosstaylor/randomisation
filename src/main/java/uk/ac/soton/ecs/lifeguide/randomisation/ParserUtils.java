package uk.ac.soton.ecs.lifeguide.randomisation;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * A class which provides access to a set of static functions which are required
 * for parsing trial specification files.
 *
 * @author Liam de Valmency (lpdv1g10@ecs.soton.ac.uk)
 * @author Aleksandar Botev (ab9g10@ecs.soton.ac.uk)
 * @author Dionisio Perez-Mavrogenis (dpm3g10@ecs.soton.ac.uk)
 * @author Kim Svensson (ks6g10@ecs.soton.ac.uk)
 * @since 1.7
 */
public class ParserUtils {

	private static final Logger logger = LoggerFactory.getLogger(ParserUtils.class);

	/**
	 * Converts a given string to lower-case, alphanumeric format. Removes all non-alphanumeric characters
	 * (including spaces), converts the result to lower case, and returns the result.
	 *
	 * @param str The string to convert to lower-case alphanumeric format.
	 * @return The converted string.
	 */
	public static String toAlphaNumeric(String str) {
		return str.toLowerCase().replaceAll("[^a-z0-9]", "");
	}

	/**
	 * Converts a given string to a format which can be interpreted as a decimal number.
	 * Removes all non-numeric characters other than decimal points, and the exponent character 'e'/'E'.
	 *
	 * @param str The string to convert to decimal conversion-ready format.
	 * @return The decimal ready string.
	 */
	public static String toDecimal(String str) {
		return str.replaceAll("[^0-9Ee.]", "");
	}

	/**
	 * Gets the lower-case, alphanumeric name of a file, when given the full absolute path, removing all directory
	 * structure and file extensions.
	 * <p/>
	 * e.g. a file C:/Users/Documents and Settings/Users/example/File123.txt returns file123.
	 *
	 * @param fullPath The full path to the file.
	 * @return The file's name, converted to lower case alphanumeric, without directory path and file extension.
	 */

	// mrt - fuck this method
	public static String getAlphanumericFileName(String fullPath) {
		String baseName = new File(fullPath).getName();

		// Remove extension.
		int extensionStart = baseName.lastIndexOf('.');
		if (extensionStart > 0)
			baseName = baseName.substring(0, extensionStart);

		return toAlphaNumeric(baseName);
	}

	/**
	 * Gets the nth token from a given string when it is split on a specified character.
	 *
	 * @param fullLine  The string to tokenise.
	 * @param separator The character or string on which to tokenise.
	 * @param index     The index of the token to be returned.
	 * @return The token at the specified position of the string. This string is empty if the index
	 *         is outside the range of strings generated by the tokenisation of the initial string.
	 */
	public static String getTokenAt(String fullLine, String separator, int index) {
		String token = fullLine;

		for (int i = 0; i < index; ++i) {
			int separatorIndex = token.indexOf(separator);
			if (separatorIndex >= 0)
				token = token.substring(separatorIndex + separator.length()).trim();
			else
				token = "";
		}

		int finalSeparation = token.indexOf(separator);
		if (finalSeparation >= 0)
			token = token.substring(0, finalSeparation);

		return token.trim();
	}

	/**
	 * Attempts to convert a string to an integer, defaulting to a given limit in the event that
	 * the conversion fails (e.g. if the provided string is not an integer string).
	 *
	 * @param str    The string to convert to an integer.
	 * @param limit  The value to use if the conversion fails.
	 * @param lineNo Used for warning messages if the conversion fails. Optional, see {@link #stringToIntLimit(String, int)};
	 * @return The converted string.
	 */
	public static int stringToIntLimit(String str, int limit, int lineNo) {
		try {
			int parsedInt = Integer.parseInt(str);
			return parsedInt;
		} catch (NumberFormatException e) {
			// If line number called with -1, logging is not desired.
			if (lineNo >= 0)
				logger.warn("[Line " + lineNo + "]: min/max value incorrectly formatted or missing. Using default limit.");
		}
		return limit;
	}

	/**
	 * Attempts to convert a string to an integer, defaulting to a given limit in the event that
	 * the conversion fails (e.g. if the provided string is not an integer string).
	 *
	 * @param str   The string to convert to an integer.
	 * @param limit The value to use if the conversion fails.
	 * @return The converted string.
	 */
	public static int stringToIntLimit(String str, int limit) {
		return stringToIntLimit(str, limit, -1);
	}

	/**
	 * Attempts to convert a string to a float, defaulting to a given limit in the event that
	 * the conversion fails (e.g. if the provided string is not a float string).
	 *
	 * @param str    The string to convert to a float.
	 * @param limit  The value to use if the conversion fails.
	 * @param lineNo Used for warning messages if the conversion fails. Optional, see {@link #stringToFloatLimit(String, float)};
	 * @return The converted string.
	 */
	public static float stringToFloatLimit(String str, float limit, int lineNo) {
		try {
			float parsedFloat = Float.parseFloat(str);
			return parsedFloat;
		} catch (NumberFormatException e) {
			if (lineNo >= 0)
				logger.warn("[Line " + lineNo + "]: Weight incorrectly formatted or missing. Using default value.");
		}
		return limit;
	}

	/**
	 * Attempts to convert a string to a float, defaulting to a given limit in the event that
	 * the conversion fails (e.g. if the provided string is not a float string).
	 *
	 * @param str   The string to convert to a float.
	 * @param limit The value to use if the conversion fails.
	 * @return The converted string.
	 */
	public static float stringToFloatLimit(String str, float limit) {
		return stringToFloatLimit(str, limit, -1);
	}

	/**
	 * Tokenises a string based on a given separator string, and returns a list of the generated tokens.
	 *
	 * @param line      The string to tokenise.
	 * @param separator The string on which to separate the provided string into tokens.
	 * @return A list of strings generated by the tokenisation.
	 */
	public static List<String> tokenise(String line, String separator) {
		return tokenise(line, separator, 0);
	}

	/**
	 * Tokenises a string based on a given separator string, and returns a list of the generated tokens,
	 * starting from a given index.
	 *
	 * @param line            The string to tokenise.
	 * @param separator       The string on which to separate the provided string into tokens.
	 * @param startTokenIndex The number of tokens to skip before they start getting added to the return list.
	 *                        Optional, see {@link #tokenise(String, String)}.
	 * @return A list of strings generated by the tokenisation.
	 */
	public static List<String> tokenise(String line, String separator, int startTokenIndex) {
		List<String> tokens = new ArrayList<String>();

		String token = "";
		int i = startTokenIndex;
		while (!(token = getTokenAt(line, separator, i)).equals("")) {
			++i;
			tokens.add(token);
		}

		return tokens;
	}

}
